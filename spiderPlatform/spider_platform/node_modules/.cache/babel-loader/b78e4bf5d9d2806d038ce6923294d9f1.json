{"remainingRequest":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\babel-loader\\lib\\index.js!D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Project\\spiderPlatform\\spider_platform\\src\\components\\cache\\AKeepAlive.js","dependencies":[{"path":"D:\\Project\\spiderPlatform\\spider_platform\\src\\components\\cache\\AKeepAlive.js","mtime":1646988546792},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646988157970},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1646988158074},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\babel-loader\\lib\\index.js","mtime":1646988157969},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\eslint-loader\\index.js","mtime":1646988172536}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IiOwppbXBvcnQgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIgZnJvbSAiRDovUHJvamVjdC9zcGlkZXJQbGF0Zm9ybS9zcGlkZXJfcGxhdGZvcm0vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgeyBpc0RlZiwgaXNSZWdFeHAsIHJlbW92ZSB9IGZyb20gJ0AvdXRpbHMvdXRpbCc7CnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTsKCmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkgewogIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7CiAgICBpZiAocGF0dGVybi5pbmRleE9mKG5hbWUpID4gLTEpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgewogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocGF0dGVybiksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgaWYgKGlzUmVnRXhwKGl0ZW0pICYmIGl0ZW0udGVzdChuYW1lKSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMTsKICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7CiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpOwogIH0KICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwoKCiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKG9wdHMpIHsKICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyk7Cn0KCmZ1bmN0aW9uIGdldENvbXBvbmVudEtleSh2bm9kZSkgewogIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucywKICAgICAga2V5ID0gdm5vZGUua2V5OwogIHJldHVybiBrZXkgPT0gbnVsbCA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAiOjoiLmNvbmNhdChjb21wb25lbnRPcHRpb25zLnRhZykgOiAnJykgOiBrZXkgKyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkOwp9CgpmdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkKGNoaWxkcmVuKSB7CiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07CgogICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgYy5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7CiAgICAgICAgcmV0dXJuIGM7CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHBydW5lQ2FjaGUoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikgewogIHZhciBjYWNoZSA9IGtlZXBBbGl2ZUluc3RhbmNlLmNhY2hlLAogICAgICBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cywKICAgICAgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlOwoKICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHsKICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTsKCiAgICBpZiAoY2FjaGVkTm9kZSkgewogICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTsKICAgICAgdmFyIGNvbXBvbmVudEtleSA9IGdldENvbXBvbmVudEtleShjYWNoZWROb2RlKTsKCiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSwgY29tcG9uZW50S2V5KSkgewogICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpOwogICAgICB9CiAgICB9CiAgfQp9CgpmdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkyKGNhY2hlLCBrZXksIGtleXMpIHsKICB2YXIgY2FjaGVkID0gY2FjaGVba2V5XTsKCiAgaWYgKGNhY2hlZCkgewogICAgY2FjaGVkLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7CiAgfQoKICBjYWNoZVtrZXldID0gbnVsbDsKICByZW1vdmUoa2V5cywga2V5KTsKfQoKZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIGN1cnJlbnQpIHsKICB2YXIgY2FjaGVkID0gY2FjaGVba2V5XTsKCiAgaWYgKGNhY2hlZCAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkLnRhZyAhPT0gY3VycmVudC50YWcpKSB7CiAgICBjYWNoZWQuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTsKICB9CgogIGNhY2hlW2tleV0gPSBudWxsOwogIHJlbW92ZShrZXlzLCBrZXkpOwp9CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0FLZWVwQWxpdmUnLAogIGFic3RyYWN0OiB0cnVlLAogIG1vZGVsOiB7CiAgICBwcm9wOiAnY2xlYXJDYWNoZXMnLAogICAgZXZlbnQ6ICdjbGVhcicKICB9LAogIHByb3BzOiB7CiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsCiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsCiAgICBleGNsdWRlS2V5czogcGF0dGVyblR5cGVzLAogICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdLAogICAgY2xlYXJDYWNoZXM6IEFycmF5CiAgfSwKICB3YXRjaDogewogICAgY2xlYXJDYWNoZXM6IGZ1bmN0aW9uIGNsZWFyQ2FjaGVzKHZhbCkgewogICAgICBpZiAodmFsICYmIHZhbC5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIGNhY2hlID0gdGhpcy5jYWNoZSwKICAgICAgICAgICAga2V5cyA9IHRoaXMua2V5czsKICAgICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkyKGNhY2hlLCBrZXksIGtleXMpOwogICAgICAgIH0pOwogICAgICAgIHRoaXMuJGVtaXQoJ2NsZWFyJywgW10pOwogICAgICB9CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICB0aGlzLmtleXMgPSBbXTsKICB9LAogIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkKCkgewogICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHsKICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTsKICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkgewogICAgICBwcnVuZUNhY2hlKF90aGlzLCBmdW5jdGlvbiAobmFtZSkgewogICAgICAgIHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7CiAgICAgIH0pOwogICAgfSk7CiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgcHJ1bmVDYWNoZShfdGhpcywgZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsKICAgICAgfSk7CiAgICB9KTsKICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlS2V5cycsIGZ1bmN0aW9uICh2YWwpIHsKICAgICAgcHJ1bmVDYWNoZShfdGhpcywgZnVuY3Rpb24gKG5hbWUsIGtleSkgewogICAgICAgIHJldHVybiAhbWF0Y2hlcyh2YWwsIGtleSk7CiAgICAgIH0pOwogICAgfSk7CiAgfSwKICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDsKICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7CiAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7CgogICAgaWYgKGNvbXBvbmVudE9wdGlvbnMpIHsKICAgICAgLy8gY2hlY2sgcGF0dGVybgogICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7CiAgICAgIHZhciBjb21wb25lbnRLZXkgPSBnZXRDb21wb25lbnRLZXkodm5vZGUpOwogICAgICB2YXIgaW5jbHVkZSA9IHRoaXMuaW5jbHVkZSwKICAgICAgICAgIGV4Y2x1ZGUgPSB0aGlzLmV4Y2x1ZGUsCiAgICAgICAgICBleGNsdWRlS2V5cyA9IHRoaXMuZXhjbHVkZUtleXM7CgogICAgICBpZiAoIC8vIG5vdCBpbmNsdWRlZAogICAgICBpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkgfHwgLy8gZXhjbHVkZWQKICAgICAgZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkgfHwgZXhjbHVkZUtleXMgJiYgY29tcG9uZW50S2V5ICYmIG1hdGNoZXMoZXhjbHVkZUtleXMsIGNvbXBvbmVudEtleSkpIHsKICAgICAgICByZXR1cm4gdm5vZGU7CiAgICAgIH0KCiAgICAgIHZhciBjYWNoZSA9IHRoaXMuY2FjaGUsCiAgICAgICAgICBrZXlzID0gdGhpcy5rZXlzOwogICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGwgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHMKICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KQogICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAiOjoiLmNvbmNhdChjb21wb25lbnRPcHRpb25zLnRhZykgOiAnJykgOiB2bm9kZS5rZXkgKyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkOwoKICAgICAgaWYgKGNhY2hlW2tleV0pIHsKICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7IC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3QKCiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7CiAgICAgICAga2V5cy5wdXNoKGtleSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlOwogICAgICAgIGtleXMucHVzaChrZXkpOyAvLyBwcnVuZSBvbGRlc3QgZW50cnkKCiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7CiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTsKICAgIH0KCiAgICByZXR1cm4gdm5vZGUgfHwgc2xvdCAmJiBzbG90WzBdOwogIH0KfTs="},null]}