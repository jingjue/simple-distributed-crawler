{"remainingRequest":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\babel-loader\\lib\\index.js!D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\Project\\spiderPlatform\\spider_platform\\src\\utils\\routerUtil.js","dependencies":[{"path":"D:\\Project\\spiderPlatform\\spider_platform\\src\\utils\\routerUtil.js","mtime":1646988546901},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646988157970},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1646988158074},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\babel-loader\\lib\\index.js","mtime":1646988157969},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\eslint-loader\\index.js","mtime":1646988172536}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}