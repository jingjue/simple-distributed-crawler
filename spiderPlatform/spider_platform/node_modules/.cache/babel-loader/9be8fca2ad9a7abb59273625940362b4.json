{"remainingRequest":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\babel-loader\\lib\\index.js!D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project\\spiderPlatform\\spider_platform\\src\\pages\\proj_manage\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Project\\spiderPlatform\\spider_platform\\src\\pages\\proj_manage\\index.vue","mtime":1657524339971},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646988157970},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1646988158074},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\babel-loader\\lib\\index.js","mtime":1646988157969},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646988157970},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\vue-loader\\lib\\index.js","mtime":1646988174758}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}