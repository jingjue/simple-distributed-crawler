{"remainingRequest":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project\\spiderPlatform\\spider_platform\\src\\layouts\\tabs\\TabsView.vue?vue&type=style&index=0&id=012d64c5&scoped=true&lang=less&","dependencies":[{"path":"D:\\Project\\spiderPlatform\\spider_platform\\src\\layouts\\tabs\\TabsView.vue","mtime":1646988546855},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\css-loader\\dist\\cjs.js","mtime":1646988174237},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1646988174758},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\postcss-loader\\src\\index.js","mtime":1646988174629},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\less-loader\\dist\\cjs.js","mtime":1646988186378},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\style-resources-loader\\lib\\index.js","mtime":1646988186714},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646988157970},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\vue-loader\\lib\\index.js","mtime":1646988174758}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50YWJzLXZpZXd7CiAgbWFyZ2luOiAtMTZweCBhdXRvIDhweDsKICAmLmhlYWQuZml4ZWR7CiAgICBtYXgtd2lkdGg6IDE0MDBweDsKICB9Cn0KLnRhYnMtdmlldy1jb250ZW50ewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAmLmhlYWQuZml4ZWR7CiAgICB3aWR0aDogMTQwMHB4OwogICAgbWFyZ2luOiAwIGF1dG87CiAgfQp9Cg=="},{"version":3,"sources":["TabsView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TabsView.vue","sourceRoot":"src/layouts/tabs","sourcesContent":["<template>\r\n  <admin-layout>\r\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" @select=\"onMenuSelect\" />\r\n    <tabs-head\r\n        v-if=\"multiPage\"\r\n        :active=\"activePage\"\r\n        :page-list=\"pageList\"\r\n        @change=\"changePage\"\r\n        @close=\"remove\"\r\n        @refresh=\"refresh\"\r\n        @contextmenu=\"onContextmenu\"\r\n    />\r\n    <div :class=\"['tabs-view-content', layout, pageWidth]\" :style=\"`margin-top: ${multiPage ? -24 : 0}px`\">\r\n      <page-toggle-transition :disabled=\"animate.disabled\" :animate=\"animate.name\" :direction=\"animate.direction\">\r\n        <a-keep-alive :exclude-keys=\"excludeKeys\" v-if=\"multiPage && cachePage\" v-model=\"clearCaches\">\r\n          <router-view v-if=\"!refreshing\" ref=\"tabContent\" :key=\"$route.path\" />\r\n        </a-keep-alive>\r\n        <router-view ref=\"tabContent\" v-else-if=\"!refreshing\" />\r\n      </page-toggle-transition>\r\n    </div>\r\n  </admin-layout>\r\n</template>\r\n\r\n<script>\r\nimport AdminLayout from '@/layouts/AdminLayout'\r\nimport Contextmenu from '@/components/menu/Contextmenu'\r\nimport PageToggleTransition from '@/components/transition/PageToggleTransition'\r\nimport {mapState, mapMutations} from 'vuex'\r\nimport {getI18nKey} from '@/utils/routerUtil'\r\nimport AKeepAlive from '@/components/cache/AKeepAlive'\r\nimport TabsHead from '@/layouts/tabs/TabsHead'\r\n\r\nexport default {\r\n  name: 'TabsView',\r\n  i18n: require('./i18n'),\r\n  components: {TabsHead, PageToggleTransition, Contextmenu, AdminLayout , AKeepAlive },\r\n  data () {\r\n    return {\r\n      clearCaches: [],\r\n      pageList: [],\r\n      activePage: '',\r\n      menuVisible: false,\r\n      refreshing: false,\r\n      excludeKeys: []\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState('setting', ['multiPage', 'cachePage', 'animate', 'layout', 'pageWidth']),\r\n    menuItemList() {\r\n      return [\r\n        { key: '1', icon: 'vertical-right', text: this.$t('closeLeft') },\r\n        { key: '2', icon: 'vertical-left', text: this.$t('closeRight') },\r\n        { key: '3', icon: 'close', text: this.$t('closeOthers') },\r\n        { key: '4', icon: 'sync', text: this.$t('refresh') },\r\n      ]\r\n    },\r\n    tabsOffset() {\r\n      return this.multiPage ? 24 : 0\r\n    }\r\n  },\r\n  created () {\r\n    this.loadCacheConfig(this.$router?.options?.routes)\r\n    this.loadCachedTabs()\r\n    const route = this.$route\r\n    if (this.pageList.findIndex(item => item.path === route.path) === -1) {\r\n      this.pageList.push(this.createPage(route))\r\n    }\r\n    this.activePage = route.path\r\n    if (this.multiPage) {\r\n      this.$nextTick(() => {\r\n        this.setCachedKey(route)\r\n      })\r\n      this.addListener()\r\n    }\r\n  },\r\n  mounted () {\r\n    this.correctPageMinHeight(-this.tabsOffset)\r\n  },\r\n  beforeDestroy() {\r\n    this.removeListener()\r\n    this.correctPageMinHeight(this.tabsOffset)\r\n  },\r\n  watch: {\r\n    '$router.options.routes': function (val) {\r\n      this.excludeKeys = []\r\n      this.loadCacheConfig(val)\r\n    },\r\n    '$route': function (newRoute) {\r\n      this.activePage = newRoute.path\r\n      const page = this.pageList.find(item => item.path === newRoute.path)\r\n      if (!this.multiPage) {\r\n        this.pageList = [this.createPage(newRoute)]\r\n      } else if (page) {\r\n        page.fullPath = newRoute.fullPath\r\n      } else if (!page) {\r\n        this.pageList.push(this.createPage(newRoute))\r\n      }\r\n      if (this.multiPage) {\r\n        this.$nextTick(() => {\r\n          this.setCachedKey(newRoute)\r\n        })\r\n      }\r\n    },\r\n    'multiPage': function (newVal) {\r\n      if (!newVal) {\r\n        this.pageList = [this.createPage(this.$route)]\r\n        this.removeListener()\r\n      } else {\r\n        this.addListener()\r\n      }\r\n    },\r\n    tabsOffset(newVal, oldVal) {\r\n      this.correctPageMinHeight(oldVal - newVal)\r\n    }\r\n  },\r\n  methods: {\r\n    changePage (key) {\r\n      this.activePage = key\r\n      const page = this.pageList.find(item => item.path === key)\r\n      this.$router.push(page.fullPath)\r\n    },\r\n    remove (key, next) {\r\n      if (this.pageList.length === 1) {\r\n        return this.$message.warning(this.$t('warn'))\r\n      }\r\n      //清除缓存\r\n      let index = this.pageList.findIndex(item => item.path === key)\r\n      this.clearCaches = this.pageList.splice(index, 1).map(page => page.cachedKey)\r\n      if (next) {\r\n        this.$router.push(next)\r\n      } else if (key === this.activePage) {\r\n        index = index >= this.pageList.length ? this.pageList.length - 1 : index\r\n        this.activePage = this.pageList[index].path\r\n        this.$router.push(this.activePage)\r\n      }\r\n    },\r\n    refresh (key, page) {\r\n      page = page || this.pageList.find(item => item.path === key)\r\n      page.loading = true\r\n      this.clearCache(page)\r\n      if (key === this.activePage) {\r\n        this.reloadContent(() => page.loading = false)\r\n      } else {\r\n        // 其实刷新很快，加这个延迟纯粹为了 loading 状态多展示一会儿，让用户感知刷新这一过程\r\n        setTimeout(() => page.loading = false, 500)\r\n      }\r\n    },\r\n    onContextmenu(pageKey, e) {\r\n      if (pageKey) {\r\n        e.preventDefault()\r\n        e.meta = pageKey\r\n        this.menuVisible = true\r\n      }\r\n    },\r\n    onMenuSelect (key, target, pageKey) {\r\n      switch (key) {\r\n        case '1': this.closeLeft(pageKey); break\r\n        case '2': this.closeRight(pageKey); break\r\n        case '3': this.closeOthers(pageKey); break\r\n        case '4': this.refresh(pageKey); break\r\n        default: break\r\n      }\r\n    },\r\n    closeOthers (pageKey) {\r\n      // 清除缓存\r\n      const clearPages = this.pageList.filter(item => item.path !== pageKey && !item.unclose)\r\n      this.clearCaches = clearPages.map(item => item.cachedKey)\r\n      this.pageList = this.pageList.filter(item => !clearPages.includes(item))\r\n      // 判断跳转\r\n      if (this.activePage != pageKey) {\r\n        this.activePage = pageKey\r\n        this.$router.push(this.activePage)\r\n      }\r\n    },\r\n    closeLeft (pageKey) {\r\n      const index = this.pageList.findIndex(item => item.path === pageKey)\r\n      // 清除缓存\r\n      const clearPages = this.pageList.filter((item, i) => i < index && !item.unclose)\r\n      this.clearCaches = clearPages.map(item => item.cachedKey)\r\n      this.pageList = this.pageList.filter(item => !clearPages.includes(item))\r\n      // 判断跳转\r\n      if (!this.pageList.find(item => item.path === this.activePage)) {\r\n        this.activePage = pageKey\r\n        this.$router.push(this.activePage)\r\n      }\r\n    },\r\n    closeRight (pageKey) {\r\n      // 清除缓存\r\n      const index = this.pageList.findIndex(item => item.path === pageKey)\r\n      const clearPages = this.pageList.filter((item, i) => i > index && !item.unclose)\r\n      this.clearCaches = clearPages.map(item => item.cachedKey)\r\n      this.pageList = this.pageList.filter(item => !clearPages.includes(item))\r\n      // 判断跳转\r\n      if (!this.pageList.find(item => item.path === this.activePage)) {\r\n        this.activePage = pageKey\r\n        this.$router.push(this.activePage)\r\n      }\r\n    },\r\n    clearCache(page) {\r\n      page._init_ = false\r\n      this.clearCaches = [page.cachedKey]\r\n    },\r\n    reloadContent(onLoaded) {\r\n      this.refreshing = true\r\n      setTimeout(() => {\r\n        this.refreshing = false\r\n        this.$nextTick(() => {\r\n          this.setCachedKey(this.$route)\r\n          if (typeof onLoaded === 'function') {\r\n            onLoaded.apply(this, [])\r\n          }\r\n        })\r\n      }, 200)\r\n    },\r\n    pageName(page) {\r\n      return this.$t(getI18nKey(page.keyPath))\r\n    },\r\n    /**\r\n     * 添加监听器\r\n     */\r\n    addListener() {\r\n      window.addEventListener('page:close', this.closePageListener)\r\n      window.addEventListener('page:refresh', this.refreshPageListener)\r\n      window.addEventListener('unload', this.unloadListener)\r\n    },\r\n    /**\r\n     * 移出监听器\r\n     */\r\n    removeListener() {\r\n      window.removeEventListener('page:close', this.closePageListener)\r\n      window.removeEventListener('page:refresh', this.refreshPageListener)\r\n      window.removeEventListener('unload', this.unloadListener)\r\n    },\r\n    /**\r\n     * 页签关闭事件监听\r\n     * @param event 页签关闭事件\r\n     */\r\n    closePageListener(event) {\r\n      const {closeRoute, nextRoute} = event.detail\r\n      const closePath = typeof closeRoute === 'string' ? closeRoute : closeRoute.path\r\n      const path = closePath && closePath.split('?')[0]\r\n      this.remove(path, nextRoute)\r\n    },\r\n    /**\r\n     * 页面刷新事件监听\r\n     * @param event 页签关闭事件\r\n     */\r\n    refreshPageListener(event) {\r\n      const {pageKey} = event.detail\r\n      const path = pageKey && pageKey.split('?')[0]\r\n      this.refresh(path)\r\n    },\r\n    /**\r\n     * 页面 unload 事件监听器，添加页签到 session 缓存，用于刷新时保留页签\r\n     */\r\n    unloadListener() {\r\n      const tabs = this.pageList.map(item => ({...item, _init_: false}))\r\n      sessionStorage.setItem(process.env.VUE_APP_TBAS_KEY, JSON.stringify(tabs))\r\n    },\r\n    createPage(route) {\r\n      return {\r\n        keyPath: route.matched[route.matched.length - 1].path,\r\n        fullPath: route.fullPath, loading: false,\r\n        path: route.path,\r\n        title: route.meta && route.meta.page && route.meta.page.title,\r\n        unclose: route.meta && route.meta.page && (route.meta.page.closable === false),\r\n      }\r\n    },\r\n    /**\r\n     * 设置页面缓存的key\r\n     * @param route 页面对应的路由\r\n     */\r\n    setCachedKey(route) {\r\n      const page = this.pageList.find(item => item.path === route.path)\r\n      page.unclose = route.meta && route.meta.page && (route.meta.page.closable === false)\r\n      if (!page._init_) {\r\n        const vnode = this.$refs.tabContent.$vnode\r\n        page.cachedKey = vnode.key + vnode.componentOptions.Ctor.cid\r\n        page._init_ = true\r\n      }\r\n    },\r\n    /**\r\n     * 加载缓存的 tabs\r\n     */\r\n    loadCachedTabs() {\r\n      const cachedTabsStr = sessionStorage.getItem(process.env.VUE_APP_TBAS_KEY)\r\n      if (cachedTabsStr) {\r\n        try {\r\n          const cachedTabs = JSON.parse(cachedTabsStr)\r\n          if (cachedTabs.length > 0) {\r\n            this.pageList = cachedTabs\r\n          }\r\n        } catch (e) {\r\n          console.warn('failed to load cached tabs, got exception:', e)\r\n        } finally {\r\n          sessionStorage.removeItem(process.env.VUE_APP_TBAS_KEY)\r\n        }\r\n      }\r\n    },\r\n    loadCacheConfig(routes, pCache = true) {\r\n      routes.forEach(item => {\r\n        const cacheAble = item.meta?.page?.cacheAble ?? pCache ?? true\r\n        if (!cacheAble) {\r\n          this.excludeKeys.push(new RegExp(`${item.path}\\\\d+$`))\r\n        }\r\n        if (item.children) {\r\n          this.loadCacheConfig(item.children, cacheAble)\r\n        }\r\n      })\r\n    },\r\n    ...mapMutations('setting', ['correctPageMinHeight'])\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n  .tabs-view{\r\n    margin: -16px auto 8px;\r\n    &.head.fixed{\r\n      max-width: 1400px;\r\n    }\r\n  }\r\n  .tabs-view-content{\r\n    position: relative;\r\n    &.head.fixed{\r\n      width: 1400px;\r\n      margin: 0 auto;\r\n    }\r\n  }\r\n</style>\r\n"]}]}