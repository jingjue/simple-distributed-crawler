{"remainingRequest":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Project\\spiderPlatform\\spider_platform\\src\\components\\checkbox\\ImgCheckbox.vue?vue&type=style&index=0&id=3a3fe34a&lang=less&scoped=true&","dependencies":[{"path":"D:\\Project\\spiderPlatform\\spider_platform\\src\\components\\checkbox\\ImgCheckbox.vue","mtime":1646988546802},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\css-loader\\dist\\cjs.js","mtime":1646988174237},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1646988174758},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\postcss-loader\\src\\index.js","mtime":1646988174629},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\less-loader\\dist\\cjs.js","mtime":1646988186378},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\style-resources-loader\\lib\\index.js","mtime":1646988186714},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1646988157970},{"path":"D:\\Project\\spiderPlatform\\spider_platform\\node_modules\\vue-loader\\lib\\index.js","mtime":1646988174758}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5pbWctY2hlY2stYm94ewogIG1hcmdpbi1yaWdodDogMTZweDsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgYm9yZGVyLXJhZGl1czogNHB4OwogIGN1cnNvcjogcG9pbnRlcjsKICAuY2hlY2staXRlbXsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHRvcDogMDsKICAgIHJpZ2h0OiAwOwogICAgd2lkdGg6IDEwMCU7CiAgICBwYWRkaW5nLXRvcDogMTVweDsKICAgIHBhZGRpbmctbGVmdDogMjRweDsKICAgIGhlaWdodDogMTAwJTsKICAgIGNvbG9yOiBAcHJpbWFyeS1jb2xvcjsKICAgIGZvbnQtc2l6ZTogMTRweDsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogIH0KfQo="},{"version":3,"sources":["ImgCheckbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ImgCheckbox.vue","sourceRoot":"src/components/checkbox","sourcesContent":["<template>\r\n  <a-tooltip :title=\"title\" :overlayStyle=\"{zIndex: 2001}\">\r\n    <div class=\"img-check-box\" @click=\"toggle\">\r\n      <img :src=\"img\" />\r\n      <div v-if=\"sChecked\" class=\"check-item\">\r\n        <a-icon type=\"check\" />\r\n      </div>\r\n    </div>\r\n  </a-tooltip>\r\n</template>\r\n\r\n<script>\r\nconst Group = {\r\n  name: 'ImgCheckboxGroup',\r\n  props: {\r\n    multiple: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    defaultValues: {\r\n      type: Array,\r\n      required: false,\r\n      default: () => []\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      values: [],\r\n      options: []\r\n    }\r\n  },\r\n  provide () {\r\n    return {\r\n      groupContext: this\r\n    }\r\n  },\r\n  watch: {\r\n    'values': function (value) {\r\n      this.$emit('change', value)\r\n      // // 此条件是为解决单选时，触发两次chang事件问题\r\n      // if (!(newVal.length === 1 && oldVal.length === 1 && newVal[0] === oldVal[0])) {\r\n      //   this.$emit('change', this.values)\r\n      // }\r\n    }\r\n  },\r\n  methods: {\r\n    handleChange (option) {\r\n      if (!option.checked) {\r\n        if (this.values.indexOf(option.value) > -1) {\r\n          this.values = this.values.filter(item => item != option.value)\r\n        }\r\n      } else {\r\n        if (!this.multiple) {\r\n          this.values = [option.value]\r\n          this.options.forEach(item => {\r\n            if (item.value != option.value) {\r\n              item.sChecked = false\r\n            }\r\n          })\r\n        } else {\r\n          this.values.push(option.value)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  render (h) {\r\n    return h(\r\n      'div',\r\n      {\r\n        attrs: {style: 'display: flex'}\r\n      },\r\n      [this.$slots.default]\r\n    )\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'ImgCheckbox',\r\n  Group,\r\n  props: {\r\n    checked: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    img: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    value: {\r\n      required: true\r\n    },\r\n    title: String\r\n  },\r\n  data () {\r\n    return {\r\n      sChecked: this.initChecked()\r\n    }\r\n  },\r\n  inject: ['groupContext'],\r\n  watch: {\r\n    'sChecked': function () {\r\n      const option = {\r\n        value: this.value,\r\n        checked: this.sChecked\r\n      }\r\n      this.$emit('change', option)\r\n      const groupContext = this.groupContext\r\n      if (groupContext) {\r\n        groupContext.handleChange(option)\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    const groupContext = this.groupContext\r\n    if (groupContext) {\r\n      this.sChecked = groupContext.defaultValues.length > 0 ? groupContext.defaultValues.indexOf(this.value) >= 0 : this.sChecked\r\n      groupContext.options.push(this)\r\n    }\r\n  },\r\n  methods: {\r\n    toggle () {\r\n      if (this.groupContext.multiple || !this.sChecked) {\r\n        this.sChecked = !this.sChecked\r\n      }\r\n    },\r\n    initChecked() {\r\n      let groupContext = this.groupContext\r\n      if (!groupContext) {\r\n        return this.checked\r\n      }else if (groupContext.multiple) {\r\n        return groupContext.defaultValues.indexOf(this.value) > -1\r\n      } else {\r\n        return groupContext.defaultValues[0] == this.value\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  .img-check-box{\r\n    margin-right: 16px;\r\n    position: relative;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    .check-item{\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      width: 100%;\r\n      padding-top: 15px;\r\n      padding-left: 24px;\r\n      height: 100%;\r\n      color: @primary-color;\r\n      font-size: 14px;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n</style>\r\n"]}]}