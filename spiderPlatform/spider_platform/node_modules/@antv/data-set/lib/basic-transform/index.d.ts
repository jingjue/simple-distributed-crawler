import { RowData } from '../helper';
export * from './aggregate';
export * from './cross';
/**
 * @public
 */
export interface FilterParams {
    callback(row: any): boolean;
}
/**
 * 过滤
 * @param rows - 数据
 * @param options - 配置
 * @public
 */
export declare function filter(rows: RowData[], options?: FilterParams): RowData[];
export * from './flatten';
export * from './fold';
export * from './kde';
export * from './impute';
export * from './lookup';
export * from './pivot';
export * from './project';
export * from './regression';
/**
 * sample params
 * @public
 */
export interface SampleParams {
    /**
     * 样本数量
     */
    size: number;
}
/**
 * 随机提取样本
 * @param rows - 数据
 * @param options - 参数
 * @public
 */
export declare function sample(rows: RowData[], options?: SampleParams): RowData[];
export * from './percent';
export * from './fill-rows';
export interface PickParams {
    fields: string[];
}
/**
 * 提取指定列
 * @param rows - 数据
 * @param options - 参数
 * @public
 */
export declare function pick(rows: RowData[], options: PickParams): RowData[];
export interface RenameParams {
    map: Record<string, string>;
}
export declare function rename(rows: RowData[], options?: RenameParams): RowData[];
export interface MapParams {
    callback(rows: any, index: number, array: RowData[]): any;
}
export declare function map(rows: RowData[], options: MapParams): RowData[];
export declare function reverse(rows: RowData[]): RowData[];
export interface SortParams {
    callback(left: any, right: any): number;
}
export declare function sort(rows: RowData[], options: SortParams): RowData[];
export interface SortByOptions {
    fields: string[];
    order?: 'ASC' | 'DESC';
}
export declare function sortBy(rows: RowData[], options: SortByOptions): RowData[];
export interface SubsetParams {
    startRowIndex?: number;
    endRowIndex?: number;
    fields?: string[];
}
export declare function subset(rows: RowData[], options?: SubsetParams): RowData[];
