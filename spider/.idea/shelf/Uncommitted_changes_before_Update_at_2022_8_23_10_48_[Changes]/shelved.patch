Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pathlib\r\nfrom collections import defaultdict\r\nfrom flask import Flask, request, jsonify, send_file\r\nfrom flask_cors import *\r\nfrom scrapy_redis.scheduler import Scheduler\r\n\r\nfrom base.db.mysql import Mysql\r\nfrom monitor.projectManager import ProjectManager\r\n\r\nsave_time = 3600\r\n\r\napp = Flask(__name__)\r\nCORS(app, supports_credentials=True)\r\nPM = ProjectManager()\r\n\r\n\r\n@app.route(\"/get_projects_info\", methods=[\"get\", \"post\"])\r\ndef get_pro_info():\r\n    project_name = request.get_json().get(\"project_name\")\r\n    if not project_name:\r\n        return {\"code\": 200, \"message\": PM.generate_config()}\r\n    else:\r\n        if project_name not in PM.projects.keys():\r\n            return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n        project = PM[project_name]\r\n\r\n        return {\"code\": 200, \"message\": project.generate_config()}\r\n\r\n\r\n@app.route(\"/create_project\", methods=[\"get\", \"post\"])\r\ndef create_project():\r\n    \"\"\"\r\n    创建项目后默认保存\r\n    \"\"\"\r\n    param = request.get_json()[\"param\"]\r\n    # 前端传过来的参数将会覆盖默认的参数配置\r\n    result = PM.create(param)\r\n    return jsonify(result)\r\n\r\n\r\n@app.route(\"/get_custom_keywords\", methods=[\"get\", \"post\"])\r\ndef get_custom_keywords():\r\n    \"\"\"\r\n    获取爬虫项目自定义关键词\r\n    :return:\r\n    \"\"\"\r\n    project_name = request.get_json().get(\"project_name\")\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    custom_keywords = []\r\n    for title_keywords in project.custom_keywords:\r\n        info = title_keywords.split(\"_\")\r\n        if len(info) == 2:\r\n            title = info[0]\r\n            keyword = info[1]\r\n        else:\r\n            title = None\r\n            keyword = info[0]\r\n        custom_keywords.append({\"title\": title, \"keyword\": keyword})\r\n    return {\"code\": 200, \"message\": custom_keywords}\r\n\r\n\r\n@app.route(\"/del_project\", methods=[\"get\", \"post\"])\r\ndef delete_project():\r\n    \"\"\"\r\n    删除某个项目\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    return {\"code\": 200, \"message\": PM.del_proj(project_name)}\r\n\r\n\r\n@app.route(\"/update_cs_status\", methods=[\"get\", \"post\"])\r\ndef update_content_spider_status():\r\n    \"\"\"\r\n    更新内容爬虫的状态，启用、停用一个或多个爬虫\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    spider_status = request.get_json()[\"spider_status\"]\r\n    new_spider_status, error = project.spider_manager.update_from_dict(spider_status)\r\n    return {\"code\": 200, \"spider_status\": new_spider_status, \"error\": error}\r\n\r\n\r\n@app.route(\"/update_cs\", methods=[\"get\", \"post\"])\r\ndef update_content_spider():\r\n    \"\"\"\r\n    添加或删除某个爬虫\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    add_spiders = request.get_json()[\"add_spiders\"]\r\n    rm_spiders = request.get_json()[\"rm_spiders\"]\r\n\r\n    errors = {}\r\n    errors.update({\"add\": project.spider_manager.add(add_spiders)})\r\n    errors.update({\"rm\": project.del_spider(rm_spiders)})\r\n    return {\"code\": 200, \"errors\": errors}\r\n\r\n\r\n@app.route(\"/rm_sys_account\", methods=[\"get\", \"post\"])\r\ndef rm_sys_account():\r\n    \"\"\"\r\n    删除系统账号\r\n    \"\"\"\r\n    id = request.get_json()[\"id\"]\r\n    return {\"code\": 200, \"message\": PM.rm_sys_account(id)}\r\n\r\n\r\n@app.route(\"/update_hs_status\", methods=[\"get\", \"post\"])\r\ndef update_hot_spider_status():\r\n    \"\"\"\r\n    更新热点爬虫的状态\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n\r\n    hs_spider_status = request.get_json()[\"hs_spider_status\"]\r\n    new_spider_status, error = project.update_hot_spider_config(hs_spider_status)\r\n    return {\"code\": 200, \"spider_status\": new_spider_status, \"error\": error}\r\n\r\n\r\n@app.route(\"/add_hot_spider\", methods=[\"get\", \"post\"])\r\ndef add_hot_spider():\r\n    project_name = request.get_json()[\"project_name\"]\r\n    add_spider = request.get_json()[\"add_spider\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    return {\"code\": 200, \"message\": project.add_hot_spider(add_spider)}\r\n\r\n\r\n@app.route(\"/rm_hot_spider\", methods=[\"get\", \"post\"])\r\ndef rm_hot_spider():\r\n    project_name = request.get_json()[\"project_name\"]\r\n    rm_spider = request.get_json()[\"rm_spider\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    return {\"code\": 200, \"message\": project.rm_hot_spider(rm_spider)}\r\n\r\n\r\n@app.route(\"/add_keyword\", methods=[\"get\", \"post\"])\r\ndef add_keywords():\r\n    \"\"\"\r\n    添加,删除指定关键词，进行监测\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    add_keywords = request.get_json()[\"add_keywords\"]\r\n    rm_keywords = request.get_json()[\"rm_keywords\"]\r\n\r\n    project.add_custom_keywords(add_keywords)\r\n    project.rm_custom_keywords(rm_keywords)\r\n\r\n    key_info = []\r\n    for title_keyword in project.custom_keywords:\r\n        info = title_keyword.split(\"_\")\r\n        key_info.append({\"title\": info[0], \"keywords\": info[1]})\r\n\r\n    return {\"code\": 200, \"message\": \"添加、删除爬虫项目成功\", \"keyowrds\": key_info}\r\n\r\n\r\n@app.route(\"/set_title_custom\", methods=[\"get\", \"post\"])\r\ndef set_title_custom():\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project or not project_name:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    title = request.get_json()[\"title\"]\r\n    return {\"code\": 200, \"message\": project.set_title(title)}\r\n\r\n\r\n@app.route(\"/get_device_info\", methods=[\"get\", \"post\"])\r\ndef get_device_info():\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 200, \"message\": PM.get_all_devices()}\r\n    return {\"code\": 200, \"message\": project.device_manager.get_devices_info()}\r\n\r\n\r\n@app.route(\"/update_pro_device_status\", methods=[\"get\", \"post\"])\r\ndef update_project_device_status():\r\n    \"\"\"\r\n    启用或停用本项目的分布式设备\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    devices = request.get_json()[\"devices\"]\r\n    error = project.device_manager.update_device_from_params(devices)\r\n    return {\"code\": 200, \"error\": error}\r\n\r\n\r\n@app.route(\"/update_pro_device\", methods=[\"get\", \"post\"])\r\ndef update_project_device():\r\n    \"\"\"\r\n    添加或删除本项目的分布式设备\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    add_ips = request.get_json()[\"add_ip\"]\r\n    rm_ips = request.get_json()[\"rm_ip\"]\r\n\r\n    errors = {}\r\n    errors[\"add\"] = project.add_devices(add_ips)\r\n    errors[\"rm\"] = project.device_manager.rm_device_from_ip(rm_ips)\r\n    return {\"code\": 200, \"error\": errors, \"device\": project.device_manager.get_devices_info()}\r\n\r\n\r\n@app.route(\"/update_sys_device\", methods=[\"get\", \"post\"])\r\ndef update_device():\r\n    \"\"\"\r\n    更新(添加，删除)整个系统的分布式设备列表\r\n    \"\"\"\r\n    rm_devices = request.get_json()[\"rm_devices\"]\r\n    add_devices = request.get_json()[\"add_devices\"]\r\n    cover = request.get_json()[\"cover\"]  # 重复信息是否覆盖\r\n    return {\"code\": 200, \"add_error\": PM.add_devices(add_devices, cover), \"rm_error\": PM.rm_devices(rm_devices)}\r\n\r\n\r\n@app.route(\"/update_pro_account\", methods=[\"get\", \"post\"])\r\ndef update_project_account():\r\n    \"\"\"\r\n    更新本项目爬虫所启用的账户\r\n    update_acc={\"weibo\":{\"add\":[],\"rm\":[]}}\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if not project_name or not project:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n    update_acc = request.get_json()[\"update_acc\"]\r\n\r\n    current = project.update_account(update_acc)\r\n    return {\"code\": 200, \"current_acc\": current}\r\n\r\n\r\n@app.route(\"/get_project_hot_spider\", methods=[\"get\", \"post\"])\r\ndef get_pro_hot_spider():\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if project:\r\n        return {\"code\": 200, \"hot_spider\": project.hot_spider_config}\r\n    else:\r\n        return {\"code\": 200, \"msg\": f\"不存在爬虫项目{project_name}\"}\r\n\r\n\r\n@app.route(\"/get_account_info\", methods=[\"get\", \"post\"])\r\ndef get_account_info():\r\n    project_name = request.get_json()[\"project_name\"]\r\n    all_account = PM.get_account_from_db()\r\n    if not project_name:\r\n        return {\"code\": 200, \"account\": all_account}\r\n    project = PM[project_name]\r\n    if project:\r\n        user_dict = project.get_account_info()\r\n        acc_info = defaultdict(dict)\r\n        for platform, infos in user_dict.items():\r\n            print(infos)\r\n            for user in infos:\r\n                acc_info[platform][user] = all_account[platform][user]\r\n        return {\"code\": 200, \"account\": acc_info}\r\n    else:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n\r\n\r\n@app.route(\"/update_account\", methods=[\"get\", \"post\"])\r\ndef update_account():\r\n    \"\"\"\r\n    更新整个系统的账户信息\r\n    也可以更新cookie信息\r\n    account_infos = [{\"platform\":\"weibo\",\"user\":\"ct\",...}]\r\n    如果是插入数据，则应当具备所有数据\r\n    \"\"\"\r\n    account_info = request.get_json()[\"account_infos\"]\r\n    return {\"code\": 200, \"msg\": PM.update_sys_account(account_info)}\r\n\r\n\r\n@app.route(\"/update_timing_job\", methods=[\"get\", \"post\"])\r\ndef update_timing_job():\r\n    \"\"\"\r\n    更新定时任务，定时任务包括：1.热点爬虫的启动时间，2.自定义爬虫固定搜索时间\r\n    整个爬虫项目全局固定一个热点爬虫和关键词爬虫，所以热点爬虫和关键词爬虫的的定时时间统一\r\n    \"\"\"\r\n    timing_param = request.get_json()[\"timing_job\"]\r\n    info = PM.update_timing_job(timing_param)\r\n    if info:\r\n        return {\"code\": 200, \"timing_job_info\": info}\r\n\r\n\r\n@app.route(\"/get_timing_job_info\", methods=[\"get\", \"post\"])\r\ndef get_timing_job_info():\r\n    return {\"code\": 200, \"job_info\": PM.job_manager.generate_config()}\r\n\r\n\r\n@app.route(\"/pause_job\", methods=[\"get\", \"post\"])\r\ndef pause_job():\r\n    name = request.get_json()[\"timing_job_name\"]\r\n    info = PM.job_manager.pause_job(name)\r\n    return {\"code\": 200, \"msg\": info}\r\n\r\n\r\n@app.route(\"/start_job\", methods=[\"get\", \"post\"])\r\ndef start_job():\r\n    name = request.get_json()[\"timing_job_name\"]\r\n    info = PM.job_manager.resume_job(job_name=name)\r\n    return {\"code\": 200, \"msg\": info}\r\n\r\n\r\n@app.route(\"/get_all_content_spider\", methods=[\"get\", \"post\"])\r\ndef get_all_content_spider():\r\n    return {\"code\": 200, \"content_spiders\": PM[0].spider_manager.get_all_content_spdier()}\r\n\r\n\r\n@app.route(\"/get_all_hot_spider\", methods=[\"get\", \"post\"])\r\ndef get_all_hot_spider():\r\n    return {\"code\": 200, \"hot_spiders\": list(PM.hot_spider_manager.all_hot_spider.keys())}\r\n\r\n\r\n@app.route(\"/rm_timing_job\", methods=[\"get\", \"post\"])\r\ndef delete_timing_job():\r\n    \"\"\"\r\n    删除定时任务\r\n    :return:\r\n    \"\"\"\r\n    job_name = request.get_json()[\"job_name\"]\r\n    status, msg = PM.delete_timing_job(job_name)\r\n    if status:\r\n        return {\"code\": 200, \"message\": True}\r\n    else:\r\n        return {\"code\": 200, \"message\": msg}\r\n\r\n\r\n@app.route(\"/update_cookie\", methods=[\"get\", \"post\"])\r\ndef update_cookie():\r\n    \"\"\"\r\n    更新cookie信息\r\n    :return:\r\n    \"\"\"\r\n    platform = request.get_json()[\"platform\"]\r\n    cookie = request.get_json()[\"cookie\"]\r\n    return {\"code\": 200, \"message\": PM.update_sys_account({\"platform\": platform, \"cookie\": cookie})}\r\n\r\n\r\n@app.route(\"/get_pro_content_spider\", methods=[\"get\", \"post\"])\r\ndef get_pro_content_spider():\r\n    \"\"\"\r\n    获取项目下的内容爬虫\r\n    :return:\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    if project:\r\n        return {\"code\": 200, \"content\": project.spider_manager.get_pro_spider()}\r\n\r\n\r\n@app.route(\"/get_headers\", methods=[\"get\", \"post\"])\r\ndef get_headers():\r\n    \"\"\"\r\n    获取请求头信息\r\n    :return:\r\n    \"\"\"\r\n    return {\"code\": 200, \"headers\": PM._header_manager.header_dict}\r\n\r\n\r\n@app.route(\"/update_headers\", methods=[\"get\", \"post\"])\r\ndef update_headers():\r\n    platform = request.get_json()[\"platform\"]\r\n    key = request.get_json()[\"key\"]\r\n    value = request.get_json()[\"value\"]\r\n    return {\"code\": 200, \"status\": PM._header_manager.update_headers(platform, key, value)}\r\n\r\n\r\n@app.route(\"/update_pro_crawl_time\", methods=[\"get\", \"post\"])\r\ndef update_pro_crawl_time():\r\n    project_name = request.get_json()[\"project_name\"]\r\n    project = PM[project_name]\r\n    crawl_time = request.get_json()[\"crawl_time\"]\r\n    if crawl_time and project:\r\n        return {\"code\": 200, \"status\": project.update_crawl_time(start=crawl_time.get(\"start\", None),\r\n                                                                 end=crawl_time.get(\"end\", None))}\r\n\r\n\r\n@app.route(\"/sec_monitor\", methods=[\"get\", \"post\"])\r\ndef sec_monitor():\r\n    \"\"\"\r\n    安全态势监测，传递爬虫项目名称，返回安全态势\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    mode = request.get_json()[\"mode\"]\r\n    project = PM[project_name]\r\n    if project:\r\n        return {\"code\": 200, \"data\": project.secure_monitor(mode)}\r\n    else:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n\r\n\r\n@app.route(\"/spider_monitor\", methods=[\"get\", \"post\"])\r\ndef spider_monitor():\r\n    \"\"\"\r\n    爬虫数据量监测\r\n    \"\"\"\r\n    project_name = request.get_json()[\"project_name\"]\r\n    platform = request.get_json()[\"platform\"]\r\n    project = PM[project_name]\r\n    if project:\r\n        return {\"code\": 200, \"data\": project.spider_monitor(platform)}\r\n    else:\r\n        return {\"code\": 300, \"message\": f\"不存在爬虫项目{project_name}\"}\r\n\r\n\r\n@app.route(\"/download_news_data\", methods=[\"get\", \"post\"])\r\ndef download_news_data():\r\n    \"\"\"\r\n    爬虫数据量监测\r\n    \"\"\"\r\n    try:\r\n        project_name = request.get_json()[\"project_name\"]\r\n        table_name = project_name + '_EventU'\r\n        mysql = Mysql()\r\n        mysql.sql2csv(table=table_name)\r\n        path = str(abs_path) + '/src/data/news_raw.csv'\r\n        return send_file(path)\r\n    except:\r\n        return {\"code\": 201, \"message\": \" 导出用户数据失败 \"}\r\n\r\n\r\nabs_path = pathlib.Path(__file__).parent.absolute()\r\n\r\n\r\n@app.route(\"/download_user_data\", methods=[\"get\", \"post\"])\r\ndef download_user_data():\r\n    \"\"\"\r\n    爬虫数据量监测\r\n    \"\"\"\r\n    try:\r\n        mysql = Mysql()\r\n        mysql.sql2csv(table='users_raw')\r\n        path = str(abs_path) + '/src/data/users_raw.csv'\r\n        return send_file(path)\r\n    except:\r\n        return {\"code\": 201, \"message\": \" 导出用户数据失败 \"}\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(host='0.0.0.0', port=5000, debug=False)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision e797599843109e256df56085f420e96e06103980)
+++ b/app.py	(date 1657763550273)
@@ -455,4 +455,4 @@
 
 
 if __name__ == '__main__':
-    app.run(host='0.0.0.0', port=5000, debug=False)
+    app.run(host='0.0.0.0', port=50001, debug=False)
